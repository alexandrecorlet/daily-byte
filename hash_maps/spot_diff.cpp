/*
 * You are given two strings, s and t which only consist of lowercase letters. 
 * t is generated by shuffling the letters in s as well as potentially adding 
 * an additional random character. Return the letter that was randomly added 
 * to t if it exists, otherwise, return ’  ‘.
 *
 * Note: You may assume that at most one additional character can 
 * be added to t.
 */

#include <bits/stdc++.h>
using namespace std;

// Time complexity: O(n + m) | Space complexity: O(n + m)
// n = s.size() and m = s.size()
char spot_difference(const string &s, const string &t) {

    unordered_map<char, int> freq_s, freq_t; 
    for (char c : s) 
        ++freq_s[c];

    for (char c : t)
        ++freq_t[c];

    for (char c : t) 
        if (freq_t[c] - freq_s[c] == 1)
            return c;

    return ' ';
}

int main() {
    
    string s, t;
    cin >> s >> t;
    cout << spot_difference(s, t) << endl;

    return 0;
}

